{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/lazy-state-initialization/",
    "result": {"data":{"cur":{"id":"b475ed69-1bf7-5412-b19b-0f0e553c7480","html":"<h2 id=\"lazy-initialization-\" style=\"position:relative;\"><a href=\"#lazy-initialization-\" aria-label=\"lazy initialization  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lazy initialization 🥱</h2>\n<h2 id=\"지연-초기-state\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EC%97%B0-%EC%B4%88%EA%B8%B0-state\" aria-label=\"지연 초기 state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;지연 초기 state></h2>\n<p>리액트에서 특정 함수나 실행 시간이 오래 걸리는 값 비싼 연산이 필요할때 useCallback이나 useMemo로 최적화를 한다.</p>\n<p>이번 블로그에서는 useState을 사용해서 초기 상태(state) 값을 할당할때 값 비싼 연산이 필요한 함수를 <code class=\"language-text\">useState(expensiveFunction())</code>이런식으로 바로 파라미터로 전달하면 발생하는 <strong>문제점과 해결 방법</strong>을 정리해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Greeting 컴포넌트</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GreetingComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLocalStorageValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> initialName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLocalStorageValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">></span>Name<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>name <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>Hello <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token string\">'Please type your name'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr/>\n<h2 id=\"예시️️\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C%EF%B8%8F%EF%B8%8F\" aria-label=\"예시️️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시🕵️‍♀️</h2>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/4c8725ce-458d-4013-8592-71e21afc198e/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.35.51.png\" alt=\"\"></p>\n<ol>\n<li>\n<p>사용자가 Input창에 이름을 입력하면 입력 값을 name 값에 업데이트하고 Hello {name}으로 사용자가 입력한 이름을 화면에 그려주는 간단한 컴포넌트이다.</p>\n</li>\n<li>\n<p>새로고침 이후에도 사용자가 마지막으로 입력한 값을 화면에 그려주기 위해서 useEffect의 의존 값을 name을 설정하고 name 값의 변화를 감지하면 localStorage에 저장하고</p>\n</li>\n<li>\n<p>컴포넌트가 리랜더링되면 useState에서 getLocalStorageValue() 함수를 통해서 로컬스토리지 값을 초기 name 값으로 설정한다.</p>\n</li>\n</ol>\n<h2 id=\"-어떤-문제가-있을까\" style=\"position:relative;\"><a href=\"#-%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\" 어떤 문제가 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 어떤 문제가 있을까?</h2>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/7654a231-891b-46f4-b7b1-0a878ed5f2f7/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.45.22.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLocalStorageValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i am an expensive function!!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> initialName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 <code class=\"language-text\">getLocalStorageValue()</code> 함수안서 로그를 찍어보면 해당 함수가 인풋 창에 입력되는 네임 값이 변할때 마다 실행되고 있는걸 볼 수 있다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/9333094b-8b00-4abf-a51e-2e62dbdc84b0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.46.01.png\" alt=\"\"></p>\n<p>우리는 초기에 컴포넌트가 실행될때 딱 한번만 로컬스토리지에서 값을 받아오면 되는데 리렌더링이 발생할때 마다 불필요한 함수가 실행되는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getLocalStorageValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/d9117a2b-ce64-4314-8e35-33851d937097/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.59.32.png\" alt=\"\"></p>\n<p>이렇게 고비용 계산을 초기 initialState 값으로 전달해야 하는 경우에 함수 형태로 useState을 변경해주면 해당 함수는 컴포넌트가 첫 랜더링할때 한번만 실행되고 이후 리랜더링 상황에서는 다시 실행되지 않는다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#lazy-initialization-\">Lazy initialization 🥱</a></li>\n<li><a href=\"#%EC%A7%80%EC%97%B0-%EC%B4%88%EA%B8%B0-state\">&#x3C;지연 초기 state></a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C%EF%B8%8F%EF%B8%8F\">예시🕵️‍♀️</a></li>\n<li><a href=\"#-%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EC%9D%84%EA%B9%8C\">❌ 어떤 문제가 있을까?</a></li>\n</ul>\n</div>","excerpt":"Lazy initialization 🥱 <지연 초기 state> 리액트에서 특정 함수나 실행 시간이 오래 걸리는 값 비싼 연산이 필요할때 useCallback이나 useMemo로 최적화를 한다. 이번 블로그에서는 useState을 사용해서 초기 상태(state) 값을 할당할때 값 비싼 연산이 필요한 함수를 이런식으로 바로 파라미터로 전달하면 발생하는 문제점과 해결 방법을 정리해보자. 예시🕵️‍♀️  사용자가 Input창에 이름을 입력하면 입력 값을 name 값에 업데이트하고 Hello {name}으로 사용자가 입력한 이름을 화면에 그려주는 간단한 컴포넌트이다. 새로고침 이후에도 사용자가 마지막으로 입력한 값을 화면에 그려주기 위해서 useEffect의 의존 값을 name을 설정하고 name 값의 변화를 감지하면 localStorage에 저장하고 컴포넌트가 리랜더링되면 useState에서 getLocalStorageValue() 함수를 통해서 로컬스토리지 값을 초기 name 값으로 설정한다…","frontmatter":{"date":"October 08, 2021","title":"useState 지연 초기 state(lazy state initialization)","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/lazy-state-initialization/"}},"next":{"id":"04d974cc-c24c-5182-a14e-59136468b1d7","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/7e27d877-5adb-47ab-85e6-25ca0cb2719a/unnamed.jpeg\" alt=\"\"></p>\n<p>다들 처음 프로그래밍 언어 또는 웹 개발을 공부를 시작하면서 그 유명한 **“hello, world”**를 터미널 또는 브라우저에 찍어본 경험이 있을꺼다.</p>\n<p>DOM과 HTML을 어느정도는 알고있다면 “Hello, World”를 브라우저 화면에 쉽게 출력할 수 있을꺼라 생각한다. 또한 스크립트 태그 안에서 자바스크립트 코드를 통해 DOM 조작을하고 웹 페이지와 상호작용을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span><span class=\"token comment\">// 자바스크립트 코드&lt;/script></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<p>다양한 웹 프레임워크가 나오기 이전에는 서버에서 HTML을 생성하고 브라우저와 상호작용을 하기 위해 HTML 위에 자바스크립트 코드를 추가했다.</p>\n<p>하지만 이러한 방식은 웹 페이지가 복잡해지고 개발적으로 요구사항이 까다로워지면서 유지보수나 성능 측면에서 문제가 발생하기 시작했고 이를 해결하기 위해 우리가 알고있는 vue나 react같은 다양한 웹 프레임워크가 등장했다. 만약 지금 리액트를 사용하지 않고 서비스를 만들어여 한다면…🥲</p>\n<p>그만큼 리액트가 좋다 😅</p>\n<hr/>\n<h1 id=\"그래서-뭐-dom이-왜\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%AD%90-dom%EC%9D%B4-%EC%99%9C\" aria-label=\"그래서 뭐 dom이 왜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 뭐 DOM이 왜?</h1>\n<p>리액트는 세계에서 가장 널리 사용되는 프런트엔드 프레임워크이고 이 블로그 시리즈 또한 결국 리액트를 조금 더 깊게 이해하고 싶은 마음에 시작했다.</p>\n<h3 id=\"-그렇다면-dom을-이해하는게-리액트를-더-잘-알기-위해서-왜-중요한가\" style=\"position:relative;\"><a href=\"#-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-dom%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94%EA%B2%8C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EB%8D%94-%EC%9E%98-%EC%95%8C%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%99%9C-%EC%A4%91%EC%9A%94%ED%95%9C%EA%B0%80\" aria-label=\" 그렇다면 dom을 이해하는게 리액트를 더 잘 알기 위해서 왜 중요한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 그렇다면 DOM을 이해하는게 리액트를 더 잘 알기 위해서 왜 중요한가?</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>body id<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span>\n      <span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document\n        <span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">textContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n</code></pre></div>\n<p>위에서 사용했던 예시를 HTML 태그를 직접 작성하지 않고 자바스크립트를 사용하여 <strong>“Hello World”라는 텍스트로 div DOM 노드를 만들고 해당 DOM 노드를 문서에 삽입하여</strong> 자바스크립트 코드만으로 같은 출력 결과를 얻을 수 있다.</p>\n<blockquote>\n<p>📌 세계에서 가장 널리 사용되고 프런트엔드 프레임워크인 리액트도 DOM 노드를 만들 때 사용하는 것과 동일한 API를 사용한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'select'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>domElement<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLSelectElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>multiple<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          node<span class=\"token punctuation\">.</span>multiple <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Setting a size greater than 1 causes a select to behave like `multiple=true`, where</span>\n          <span class=\"token comment\">// it is possible that no option is selected.</span>\n          <span class=\"token comment\">//</span>\n          <span class=\"token comment\">// This is only necessary when a select in \"single selection mode\".</span>\n          node<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    domElement <span class=\"token operator\">=</span> ownerDocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElementNS</span><span class=\"token punctuation\">(</span>namespaceURI<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>namespaceURI <span class=\"token operator\">===</span> <span class=\"token constant\">HTML_NAMESPACE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">!</span>isCustomComponentTag <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>domElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span>\n          <span class=\"token string\">'[object HTMLUnknownElement]'</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token operator\">!</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>warnedUnknownTags<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        warnedUnknownTags<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">'The tag &lt;%s> is unrecognized in this browser. '</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'If you meant to render a React component, start its name with '</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'an uppercase letter.'</span><span class=\"token punctuation\">,</span>\n          type<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> domElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>리액트 소스코드의 일부분이다. 사실 이 코드가 어떤 동작을 하는지 알지는 못하지만 리액트가 흔히 말하는 어떠한 “매직”을 일으키는게 아니라 내부적으로는 우리가 알고있는 browser API를 사용해서 DOM 요소를 만들고 있다는게 중요하다.</p>\n<ul>\n<li>\n<p>React 이전에는 DOM을 직접적으로 조작하는 방식이였고 이러한 방식을 <strong>명령형(imperative) 프로그래밍</strong> 이라고 한다.</p>\n</li>\n<li>\n<p>이 방식의 문제점은 여러 이벤트 간의 연결을 파악하기 힘들다는 점이다.</p>\n</li>\n<li>\n<p>또한 DOM을 직접적으로 조작하는 것은 performance에 큰 영향을 미친다.</p>\n</li>\n</ul>\n<p>즉, 리액트는 이러한 문제점을 보안해주기 위해 기존 명령형 방식을 내부적으로 처리해서 <strong>선언형(declarative) 프로그래밍적</strong>으로 API를 사용할 수 있게 해준다.</p>\n<hr/>\n<h2 id=\"react--reactdom\" style=\"position:relative;\"><a href=\"#react--reactdom\" aria-label=\"react  reactdom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React &#x26; ReactDOM</h2>\n<p>리액트에 익숙하다면 아래 구문을 잘 알고 있을꺼다. App.js 컴포넌트를 작업하고나 새로운 컴포넌트를 만들면서 무수히 많이 작성했을꺼다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>일단은 리액트의 문법인 JSX를 사용하지 않고 리액트가 제공하는 API를 통해서 직접적으로 위에서 만든 DOM 요소를 리액트 요소로 변경해보자.</p>\n<blockquote>\n<p>기억해야 할게 리액트는 리액트 네이티브와 같이 브라주저가 아닌 다른 플랫폼 개발도 지원하기 때문에 React API 외에도 각 플랫폼에 맞춰진 별도의 API를 제공한다. 웹의 경우 ReactDOM을 사용한다.</p>\n</blockquote>\n<ul>\n<li><strong>React</strong>: document.createElement()와 비슷한 React.createElement같은 메소드를 제공한다.</li>\n<li><strong>ReactDOM</strong>: DOM에 요소를 랜더링할때 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/react@17.0.0/umd/react.development.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/react-dom@17.0.0/umd/react-dom.development.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> helloElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> worldElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> reactElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      className<span class=\"token operator\">:</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span>\n      children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>helloElement<span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> worldElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>reactElement<span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"-브라우저-출력화면\" style=\"position:relative;\"><a href=\"#-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%B6%9C%EB%A0%A5%ED%99%94%EB%A9%B4\" aria-label=\" 브라우저 출력화면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖥 브라우저 출력화면:</h4>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/05527512-46c7-4128-aec2-02a91e81f4aa/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-09-20%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%205.58.39.png\" alt=\"\"></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-dom%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94%EA%B2%8C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EB%8D%94-%EC%9E%98-%EC%95%8C%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%99%9C-%EC%A4%91%EC%9A%94%ED%95%9C%EA%B0%80\">🤔 그렇다면 DOM을 이해하는게 리액트를 더 잘 알기 위해서 왜 중요한가?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#react--reactdom\">React &#x26; ReactDOM</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%B6%9C%EB%A0%A5%ED%99%94%EB%A9%B4\">🖥 브라우저 출력화면:</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 07, 2021","title":"react 컴포넌트와 DOM api","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/react-and-dom-api/"}},"prev":{"id":"58ec3cec-355c-5b39-81e4-0d924044ff07","html":"<h2 id=\"️⃣-해시\" style=\"position:relative;\"><a href=\"#%EF%B8%8F%E2%83%A3-%ED%95%B4%EC%8B%9C\" aria-label=\"️⃣ 해시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#️⃣ 해시</h2>\n<p>👨‍🏫 해쉬 테이블(Hash Table)은 “키” 와 “데이터”를 저장함으로써 즉각적으로 데이터를 받아오고 업데이트하고 싶을 때 사용하는 빠른 검색과 저장이 특징인 자료구조이다.</p>\n<p>해시 테이블의 형태의 자료구조는 여러 언어에서 이미 우리가 많이 사용하고 있다. 자바스크립트의 오브젝트 또는 파이썬의 딕셔너리를 해시 테이블과 같다고 보면 된다 (사실 완저히 같다고 할 수는 없지만 현재로서는 이렇게 이해하는게 가장 좋을거 같다).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"사과\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"초록\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"포도\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>“데이터를 빠르게 검색할 수 있다”라는 해시 테이블의 장점은 우리가 딕셔너리에서 또는 자바스크립트 오브젝트에서 index가 아닌 key 값으로 특정 데이터에 접근할 때를 생각하면 된다. 예를 들어서 위에 예시로 작성한 dict 오브젝트에 2개의 데이터 쌍이 아닌 100개의 key value 쌍의 데이터가 있다고 생각해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"사과\"</span></code></pre></div>\n<p>아무리 많은 데이터가 있어도 key 값만 가지고 있다면 바로 원하는 데이터에 접근할 수 있고 따라서 <strong>해시테이블의 평균 시간복잡도는 O(1)이다.</strong></p>\n<br/>\n<p>👉 키를 통해 바로 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라진다.</p>\n<p>찾는 데이터가 있는지 배열을 다~~~둘러보지 않고,</p>\n<p>키에 대해서 검색하면 바로 값을 조회할 수 있는 아주 유용한 자료구조이다.</p>\n<br/>\n<h2 id=\"-잠깐-배열과-차이는\" style=\"position:relative;\"><a href=\"#-%EC%9E%A0%EA%B9%90-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EC%B0%A8%EC%9D%B4%EB%8A%94\" aria-label=\" 잠깐 배열과 차이는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖐 잠깐! 배열과 차이는?</h2>\n<ul>\n<li>\n<p>배열은 연관된 데이터를 모아서 한 번에 관리하기 위해 사용하는 데이터 타입이다. 배열의 요소(데이터)는 직선형적으로 또 순차적으로 저장되고 int(정수)타입의 index 값을 가진다.\n<img src=\"https://images.velog.io/images/heesungj7/post/61b58c41-7a12-4007-ab12-4f9d1aceff56/img.png\" alt=\"\"></p>\n</li>\n<li>\n<p>반면 해시 테이블의 요소는 <strong>“key”</strong> 값을 가지며, 이는 해시함수를 적용해 고유한 index를 변환되고 특정한 순서나 패턴없이 해시 함수를 통해 얻은 index 위치에 데이터를 저장한다.\n<img src=\"https://images.velog.io/images/heesungj7/post/a7f11447-d1b9-4631-864c-ddf5159b217a/%E1%84%83%E1%85%A1%E1%84%8B%E1%85%AE%E1%86%AB%E1%84%85%E1%85%A9%E1%84%83%E1%85%B3.png\" alt=\"\"></p>\n</li>\n<li>\n<p>해시 함수는 언제나 동일한 해시값을 리턴하고, 인덱스만 알면 해시 테이블이 아무리 커도 데이터에 빠르게 접근할 수 있다.(배열과 유사) 따라서 데이터에 접근하는 경우 시간복잡도는 O(1)을 지향하는 상수에 가까운 값이 나오게 된다. 배열의 경우 탐색시 시간복잡도는 O(1)이지만, 메모리를 미리 많이 할당해 두어야 하기 때문에 공간효율적이라고 보기가 어렵다.</p>\n</li>\n</ul>\n<br/>\n<blockquote>\n<p>예를 들면 해시테이블에서 “key 3에 해당하는 값이 있는가?”는 O(1) 연산이지만 배열에는 키값의 개념이 없으니 찾고자 하는 요소가 배열의 마지막에 위치해 있다면 처음부터 끝까지 다 비교해 봐야 하므로 O(N)의 연산이 된다.</p>\n</blockquote>\n<br/>\n<hr/>\n<br/>\n<h2 id=\"-해시-테이블-딕셔너리도-사실-내부적으로는-배열을-사용한다\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%8F%84-%EC%82%AC%EC%8B%A4-%EB%82%B4%EB%B6%80%EC%A0%81%EC%9C%BC%EB%A1%9C%EB%8A%94-%EB%B0%B0%EC%97%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\" 해시 테이블 딕셔너리도 사실 내부적으로는 배열을 사용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 해시 테이블 (딕셔너리)도 사실 내부적으로는 배열을 사용한다?</h2>\n<p>위 예시에서 “빨강”이라는 key 값을 가지고 “사과”라는 value에 바로 접근이 가능했다. 그렇다면 내부 적으로 어떻게 이게 가능할까? loop 실행하지 않고 수 많은 데이터 중에서 어떻게 특정 데이터의 위치를 찾을 수 있을까? <strong>👉 바로 해시 함수가 이를 가능하게 한다.</strong></p>\n<h3 id=\"-해시-함수-hash-function\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-hash-function\" aria-label=\" 해시 함수 hash function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 해시 함수 (hash function)</h3>\n<blockquote>\n<p>해시 테이블은 각각의 Key값에 <strong>해시함수</strong>를 적용해 배열의 <strong>고유한 index</strong>를 생성하고, 이 index를 활용해 값을 저장하거나 검색하게 된다.</p>\n</blockquote>\n<p>해쉬 함수(Hash Function)는 임의의 길이를 갖는 메시지를 입력하여 고정된 길이의 해쉬값을 출력하는 함수이다.</p>\n<p>일단, 파이썬이 내장 함수로 제공하는 해시 함수를 실행시켜 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token number\">146084012848775433</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"초록\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">7051061338400740146</span></code></pre></div>\n<p>출력 값을 보면 마이너스 값도 있고, 무지막지하게 큰 값도 있다. 어떻게 이 값들을 이용해서 배열에 넣을까?</p>\n<p>바로 <strong>배열의 길이로 나눈 나머지 값을 쓰면 된다.</strong></p>\n<p>예를 들어 (Key, Value)가 (“빨강”, “사과”)인 데이터를 크기가 8인 해시 테이블에 저장한다고 하자.</p>\n<ul>\n<li>\n<p>그러면 먼저 index = hash_function(“빨강”) % 8 연산을 통해 index 값을 계산한다.</p>\n</li>\n<li>\n<p>그리고 array[index] = “사과”로 데이터를 저장하게 된다.</p>\n</li>\n</ul>\n<h3 id=\"️-파이썬으로-해시-테이블을-딕셔너리로-간단하게-구현해보고-기본적인-작동-원리와-개념을-익혀보자\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B3%A0-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC%EC%99%80-%EA%B0%9C%EB%85%90%EC%9D%84-%EC%9D%B5%ED%98%80%EB%B3%B4%EC%9E%90\" aria-label=\"️ 파이썬으로 해시 테이블을 딕셔너리로 간단하게 구현해보고 기본적인 작동 원리와 개념을 익혀보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 파이썬으로 <strong>해시 테이블</strong>을 딕셔너리로 간단하게 구현해보고 기본적인 작동 원리와 개념을 익혀보자.</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dict</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        index <span class=\"token operator\">=</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 새로운 딕셔너리 객체를 생성하고</span>\nmy_dict <span class=\"token operator\">=</span> Dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 딕셔너리 클래스에 정의한 put method로 데이터를</span>\nmy_dict<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"사과\"</span><span class=\"token punctuation\">)</span> 삽입한다<span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">#배열(8)      [], [], [], [], [], [], [], []</span>\n<span class=\"token comment\">#index       0   1   2   3   4   5   6   7</span>\n\n<span class=\"token comment\"># put 함수의 인자 값으로 key와 value가 전달된다</span>\n<span class=\"token comment\"># > put(\"빨강\", \"사과\")</span>\n<span class=\"token comment\"># > index = hash(\"빨강\") % 8</span>\n<span class=\"token comment\"># > index = -3828184704475021389 % 8 = 3</span>\n<span class=\"token comment\"># > index = 3</span>\n<span class=\"token comment\"># self.items[3] = \"사과\"</span>\n<span class=\"token comment\">#배열(8)      [], [], [], [\"사과\"], [], [], [], []</span>\n<span class=\"token comment\">#index       0   1   2      3     4   5   6   7</span>\n\n\n<span class=\"token comment\">#이제 해시 테이블이 내부적으로 어떻게 배열을 활용해 데이터를 저장하는지 알아봤으니 key 값을 가지고 어떻게 데이터를 접근해 반환하는지 알아보자.</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_dict<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"사과\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> <span class=\"token number\">3</span>을 반환한다<span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\"># get(self, key)</span>\n<span class=\"token comment\"># > print(get(\"빨강\"))</span>\n<span class=\"token comment\"># > index = hash(\"빨강\")%len(8) = 3</span>\n<span class=\"token comment\"># > return self.items[3]</span>\n<span class=\"token operator\">></span> 🍎 사과</code></pre></div>\n<p>이렇게 해시 함수를 사용하면 key를 주소 값으로 쉽게 원하는 데이터를 찾을 수 있고 해시 테이블의 기본적인 작동 방식이다.</p>\n<h2 id=\"️-주의사항-만약-해쉬의-값이-같으면-어떻게-될까\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-%EB%A7%8C%EC%95%BD-%ED%95%B4%EC%89%AC%EC%9D%98-%EA%B0%92%EC%9D%B4-%EA%B0%99%EC%9C%BC%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C\" aria-label=\"️ 주의사항 만약 해쉬의 값이 같으면 어떻게 될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚠️ 주의사항: 만약 해쉬의 값이 같으면 어떻게 될까?</h2>\n<p>index 값은 해시 값을 배열의 길이로 나누어 얻기 때문에 이미 데이터를 저장한 index 값이 다시 나올 확률이 있다. 이러한 경우에 같은 어레이의 인덱스로 매핑이 되어서 데이터를 덮어 써버리는 결과가 발생한다.</p>\n<p><strong>이를 충돌(collision)이 발생했다고 한다.</strong></p>\n<p>이러한 충돌을 해결하는 여러가지 방법이 있는데 대표적으로 <strong>chaining</strong> 방식과 <strong>Addressing</strong> 방법이 있다.</p>\n<h3 id=\"chaining\" style=\"position:relative;\"><a href=\"#chaining\" aria-label=\"chaining permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chaining</h3>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/a9586bae-6145-46e6-aadc-13e959832e14/Untitled.png\" alt=\"\"></p>\n<p>chaining 방법 살펴보면 배열에 들어갈 수 있는 엔트리의 수에 제한을 두지 않음으로서, 모든 자료를 해시테이블에 담는 것이다. 해당 버킷에 이미 데이터가 있다면 연결 리스트 (linked list) 방식을 사용하여 노드와 노드를 체인처럼 연결하는 방법이다.</p>\n<blockquote>\n<p>이 방법의 장점은 유연하며, 삭제 및 삽입의 시간복잡도가 O(1)으로 빠르다는 점이 있다.</p>\n</blockquote>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>해쉬 테이블(Hash Table)은 “키” 와 “데이터”를 저장함으로써 즉각적으로 데이터를 받아오고 업데이트하고 싶을 때 사용하는 자료구조이다.</p>\n<p>해쉬 함수(Hash Function)는 임의의 길이를 갖는 메시지를 입력하여 고정된 길이의 해쉬값을 출력하는 함수이다.</p>\n<p>해쉬 테이블의 내부 구현은 키를 해쉬 함수를 통해 임의의 값으로 변경한 뒤 배열의 인덱스로 변환하여 해당하는 값에 데이터를 저장한다.</p>\n<p>그렇기 때문에 즉각적으로 데이터를 찾고, 추가할 수 있는 것 이다.</p>\n<p>만약, 해쉬 값 혹은 인덱스가 중복되어 충돌이 일어난다면?</p>\n<br/>\n<p>✅ 체이닝과 개방 주소법 방법으로 해결할 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F%E2%83%A3-%ED%95%B4%EC%8B%9C\">#️⃣ 해시</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%9E%A0%EA%B9%90-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EC%B0%A8%EC%9D%B4%EB%8A%94\">🖐 잠깐! 배열과 차이는?</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%8F%84-%EC%82%AC%EC%8B%A4-%EB%82%B4%EB%B6%80%EC%A0%81%EC%9C%BC%EB%A1%9C%EB%8A%94-%EB%B0%B0%EC%97%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\">📌 해시 테이블 (딕셔너리)도 사실 내부적으로는 배열을 사용한다?</a></p>\n<ul>\n<li><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-hash-function\">📖 해시 함수 (hash function)</a></li>\n<li><a href=\"#%EF%B8%8F-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B3%A0-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC%EC%99%80-%EA%B0%9C%EB%85%90%EC%9D%84-%EC%9D%B5%ED%98%80%EB%B3%B4%EC%9E%90\">✏️ 파이썬으로 <strong>해시 테이블</strong>을 딕셔너리로 간단하게 구현해보고 기본적인 작동 원리와 개념을 익혀보자.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-%EB%A7%8C%EC%95%BD-%ED%95%B4%EC%89%AC%EC%9D%98-%EA%B0%92%EC%9D%B4-%EA%B0%99%EC%9C%BC%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C\">⚠️ 주의사항: 만약 해쉬의 값이 같으면 어떻게 될까?</a></p>\n<ul>\n<li><a href=\"#chaining\">Chaining</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 09, 2021","title":"해시 테이블 (hash table)","categories":"자료구조","author":"장희성","emoji":"✏️"},"fields":{"slug":"/hash-table/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/lazy-state-initialization/","nextSlug":"/react-and-dom-api/","prevSlug":"/hash-table/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}