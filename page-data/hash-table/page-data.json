{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/hash-table/",
    "result": {"data":{"cur":{"id":"58ec3cec-355c-5b39-81e4-0d924044ff07","html":"<h2 id=\"️⃣-해시\" style=\"position:relative;\"><a href=\"#%EF%B8%8F%E2%83%A3-%ED%95%B4%EC%8B%9C\" aria-label=\"️⃣ 해시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#️⃣ 해시</h2>\n<p>👨‍🏫 해쉬 테이블(Hash Table)은 “키” 와 “데이터”를 저장함으로써 즉각적으로 데이터를 받아오고 업데이트하고 싶을 때 사용하는 빠른 검색과 저장이 특징인 자료구조이다.</p>\n<p>해시 테이블의 형태의 자료구조는 여러 언어에서 이미 우리가 많이 사용하고 있다. 자바스크립트의 오브젝트 또는 파이썬의 딕셔너리를 해시 테이블과 같다고 보면 된다 (사실 완저히 같다고 할 수는 없지만 현재로서는 이렇게 이해하는게 가장 좋을거 같다).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"사과\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"초록\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"포도\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>“데이터를 빠르게 검색할 수 있다”라는 해시 테이블의 장점은 우리가 딕셔너리에서 또는 자바스크립트 오브젝트에서 index가 아닌 key 값으로 특정 데이터에 접근할 때를 생각하면 된다. 예를 들어서 위에 예시로 작성한 dict 오브젝트에 2개의 데이터 쌍이 아닌 100개의 key value 쌍의 데이터가 있다고 생각해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"사과\"</span></code></pre></div>\n<p>아무리 많은 데이터가 있어도 key 값만 가지고 있다면 바로 원하는 데이터에 접근할 수 있고 따라서 <strong>해시테이블의 평균 시간복잡도는 O(1)이다.</strong></p>\n<br/>\n<p>👉 키를 통해 바로 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라진다.</p>\n<p>찾는 데이터가 있는지 배열을 다~~~둘러보지 않고,</p>\n<p>키에 대해서 검색하면 바로 값을 조회할 수 있는 아주 유용한 자료구조이다.</p>\n<br/>\n<h2 id=\"-잠깐-배열과-차이는\" style=\"position:relative;\"><a href=\"#-%EC%9E%A0%EA%B9%90-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EC%B0%A8%EC%9D%B4%EB%8A%94\" aria-label=\" 잠깐 배열과 차이는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖐 잠깐! 배열과 차이는?</h2>\n<ul>\n<li>\n<p>배열은 연관된 데이터를 모아서 한 번에 관리하기 위해 사용하는 데이터 타입이다. 배열의 요소(데이터)는 직선형적으로 또 순차적으로 저장되고 int(정수)타입의 index 값을 가진다.\n<img src=\"https://images.velog.io/images/heesungj7/post/61b58c41-7a12-4007-ab12-4f9d1aceff56/img.png\" alt=\"\"></p>\n</li>\n<li>\n<p>반면 해시 테이블의 요소는 <strong>“key”</strong> 값을 가지며, 이는 해시함수를 적용해 고유한 index를 변환되고 특정한 순서나 패턴없이 해시 함수를 통해 얻은 index 위치에 데이터를 저장한다.\n<img src=\"https://images.velog.io/images/heesungj7/post/a7f11447-d1b9-4631-864c-ddf5159b217a/%E1%84%83%E1%85%A1%E1%84%8B%E1%85%AE%E1%86%AB%E1%84%85%E1%85%A9%E1%84%83%E1%85%B3.png\" alt=\"\"></p>\n</li>\n<li>\n<p>해시 함수는 언제나 동일한 해시값을 리턴하고, 인덱스만 알면 해시 테이블이 아무리 커도 데이터에 빠르게 접근할 수 있다.(배열과 유사) 따라서 데이터에 접근하는 경우 시간복잡도는 O(1)을 지향하는 상수에 가까운 값이 나오게 된다. 배열의 경우 탐색시 시간복잡도는 O(1)이지만, 메모리를 미리 많이 할당해 두어야 하기 때문에 공간효율적이라고 보기가 어렵다.</p>\n</li>\n</ul>\n<br/>\n<blockquote>\n<p>예를 들면 해시테이블에서 “key 3에 해당하는 값이 있는가?”는 O(1) 연산이지만 배열에는 키값의 개념이 없으니 찾고자 하는 요소가 배열의 마지막에 위치해 있다면 처음부터 끝까지 다 비교해 봐야 하므로 O(N)의 연산이 된다.</p>\n</blockquote>\n<br/>\n<hr/>\n<br/>\n<h2 id=\"-해시-테이블-딕셔너리도-사실-내부적으로는-배열을-사용한다\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%8F%84-%EC%82%AC%EC%8B%A4-%EB%82%B4%EB%B6%80%EC%A0%81%EC%9C%BC%EB%A1%9C%EB%8A%94-%EB%B0%B0%EC%97%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\" 해시 테이블 딕셔너리도 사실 내부적으로는 배열을 사용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 해시 테이블 (딕셔너리)도 사실 내부적으로는 배열을 사용한다?</h2>\n<p>위 예시에서 “빨강”이라는 key 값을 가지고 “사과”라는 value에 바로 접근이 가능했다. 그렇다면 내부 적으로 어떻게 이게 가능할까? loop 실행하지 않고 수 많은 데이터 중에서 어떻게 특정 데이터의 위치를 찾을 수 있을까? <strong>👉 바로 해시 함수가 이를 가능하게 한다.</strong></p>\n<h3 id=\"-해시-함수-hash-function\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-hash-function\" aria-label=\" 해시 함수 hash function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 해시 함수 (hash function)</h3>\n<blockquote>\n<p>해시 테이블은 각각의 Key값에 <strong>해시함수</strong>를 적용해 배열의 <strong>고유한 index</strong>를 생성하고, 이 index를 활용해 값을 저장하거나 검색하게 된다.</p>\n</blockquote>\n<p>해쉬 함수(Hash Function)는 임의의 길이를 갖는 메시지를 입력하여 고정된 길이의 해쉬값을 출력하는 함수이다.</p>\n<p>일단, 파이썬이 내장 함수로 제공하는 해시 함수를 실행시켜 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token number\">146084012848775433</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"초록\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">7051061338400740146</span></code></pre></div>\n<p>출력 값을 보면 마이너스 값도 있고, 무지막지하게 큰 값도 있다. 어떻게 이 값들을 이용해서 배열에 넣을까?</p>\n<p>바로 <strong>배열의 길이로 나눈 나머지 값을 쓰면 된다.</strong></p>\n<p>예를 들어 (Key, Value)가 (“빨강”, “사과”)인 데이터를 크기가 8인 해시 테이블에 저장한다고 하자.</p>\n<ul>\n<li>\n<p>그러면 먼저 index = hash_function(“빨강”) % 8 연산을 통해 index 값을 계산한다.</p>\n</li>\n<li>\n<p>그리고 array[index] = “사과”로 데이터를 저장하게 된다.</p>\n</li>\n</ul>\n<h3 id=\"️-파이썬으로-해시-테이블을-딕셔너리로-간단하게-구현해보고-기본적인-작동-원리와-개념을-익혀보자\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B3%A0-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC%EC%99%80-%EA%B0%9C%EB%85%90%EC%9D%84-%EC%9D%B5%ED%98%80%EB%B3%B4%EC%9E%90\" aria-label=\"️ 파이썬으로 해시 테이블을 딕셔너리로 간단하게 구현해보고 기본적인 작동 원리와 개념을 익혀보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 파이썬으로 <strong>해시 테이블</strong>을 딕셔너리로 간단하게 구현해보고 기본적인 작동 원리와 개념을 익혀보자.</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dict</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        index <span class=\"token operator\">=</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 새로운 딕셔너리 객체를 생성하고</span>\nmy_dict <span class=\"token operator\">=</span> Dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 딕셔너리 클래스에 정의한 put method로 데이터를</span>\nmy_dict<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"사과\"</span><span class=\"token punctuation\">)</span> 삽입한다<span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">#배열(8)      [], [], [], [], [], [], [], []</span>\n<span class=\"token comment\">#index       0   1   2   3   4   5   6   7</span>\n\n<span class=\"token comment\"># put 함수의 인자 값으로 key와 value가 전달된다</span>\n<span class=\"token comment\"># > put(\"빨강\", \"사과\")</span>\n<span class=\"token comment\"># > index = hash(\"빨강\") % 8</span>\n<span class=\"token comment\"># > index = -3828184704475021389 % 8 = 3</span>\n<span class=\"token comment\"># > index = 3</span>\n<span class=\"token comment\"># self.items[3] = \"사과\"</span>\n<span class=\"token comment\">#배열(8)      [], [], [], [\"사과\"], [], [], [], []</span>\n<span class=\"token comment\">#index       0   1   2      3     4   5   6   7</span>\n\n\n<span class=\"token comment\">#이제 해시 테이블이 내부적으로 어떻게 배열을 활용해 데이터를 저장하는지 알아봤으니 key 값을 가지고 어떻게 데이터를 접근해 반환하는지 알아보자.</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_dict<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"빨강\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"사과\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> <span class=\"token number\">3</span>을 반환한다<span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\"># get(self, key)</span>\n<span class=\"token comment\"># > print(get(\"빨강\"))</span>\n<span class=\"token comment\"># > index = hash(\"빨강\")%len(8) = 3</span>\n<span class=\"token comment\"># > return self.items[3]</span>\n<span class=\"token operator\">></span> 🍎 사과</code></pre></div>\n<p>이렇게 해시 함수를 사용하면 key를 주소 값으로 쉽게 원하는 데이터를 찾을 수 있고 해시 테이블의 기본적인 작동 방식이다.</p>\n<h2 id=\"️-주의사항-만약-해쉬의-값이-같으면-어떻게-될까\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-%EB%A7%8C%EC%95%BD-%ED%95%B4%EC%89%AC%EC%9D%98-%EA%B0%92%EC%9D%B4-%EA%B0%99%EC%9C%BC%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C\" aria-label=\"️ 주의사항 만약 해쉬의 값이 같으면 어떻게 될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚠️ 주의사항: 만약 해쉬의 값이 같으면 어떻게 될까?</h2>\n<p>index 값은 해시 값을 배열의 길이로 나누어 얻기 때문에 이미 데이터를 저장한 index 값이 다시 나올 확률이 있다. 이러한 경우에 같은 어레이의 인덱스로 매핑이 되어서 데이터를 덮어 써버리는 결과가 발생한다.</p>\n<p><strong>이를 충돌(collision)이 발생했다고 한다.</strong></p>\n<p>이러한 충돌을 해결하는 여러가지 방법이 있는데 대표적으로 <strong>chaining</strong> 방식과 <strong>Addressing</strong> 방법이 있다.</p>\n<h3 id=\"chaining\" style=\"position:relative;\"><a href=\"#chaining\" aria-label=\"chaining permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chaining</h3>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/a9586bae-6145-46e6-aadc-13e959832e14/Untitled.png\" alt=\"\"></p>\n<p>chaining 방법 살펴보면 배열에 들어갈 수 있는 엔트리의 수에 제한을 두지 않음으로서, 모든 자료를 해시테이블에 담는 것이다. 해당 버킷에 이미 데이터가 있다면 연결 리스트 (linked list) 방식을 사용하여 노드와 노드를 체인처럼 연결하는 방법이다.</p>\n<blockquote>\n<p>이 방법의 장점은 유연하며, 삭제 및 삽입의 시간복잡도가 O(1)으로 빠르다는 점이 있다.</p>\n</blockquote>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>해쉬 테이블(Hash Table)은 “키” 와 “데이터”를 저장함으로써 즉각적으로 데이터를 받아오고 업데이트하고 싶을 때 사용하는 자료구조이다.</p>\n<p>해쉬 함수(Hash Function)는 임의의 길이를 갖는 메시지를 입력하여 고정된 길이의 해쉬값을 출력하는 함수이다.</p>\n<p>해쉬 테이블의 내부 구현은 키를 해쉬 함수를 통해 임의의 값으로 변경한 뒤 배열의 인덱스로 변환하여 해당하는 값에 데이터를 저장한다.</p>\n<p>그렇기 때문에 즉각적으로 데이터를 찾고, 추가할 수 있는 것 이다.</p>\n<p>만약, 해쉬 값 혹은 인덱스가 중복되어 충돌이 일어난다면?</p>\n<br/>\n<p>✅ 체이닝과 개방 주소법 방법으로 해결할 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F%E2%83%A3-%ED%95%B4%EC%8B%9C\">#️⃣ 해시</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%9E%A0%EA%B9%90-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EC%B0%A8%EC%9D%B4%EB%8A%94\">🖐 잠깐! 배열과 차이는?</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%8F%84-%EC%82%AC%EC%8B%A4-%EB%82%B4%EB%B6%80%EC%A0%81%EC%9C%BC%EB%A1%9C%EB%8A%94-%EB%B0%B0%EC%97%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\">📌 해시 테이블 (딕셔너리)도 사실 내부적으로는 배열을 사용한다?</a></p>\n<ul>\n<li><a href=\"#-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-hash-function\">📖 해시 함수 (hash function)</a></li>\n<li><a href=\"#%EF%B8%8F-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9C%BC%EB%A1%9C-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B3%A0-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC%EC%99%80-%EA%B0%9C%EB%85%90%EC%9D%84-%EC%9D%B5%ED%98%80%EB%B3%B4%EC%9E%90\">✏️ 파이썬으로 <strong>해시 테이블</strong>을 딕셔너리로 간단하게 구현해보고 기본적인 작동 원리와 개념을 익혀보자.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-%EB%A7%8C%EC%95%BD-%ED%95%B4%EC%89%AC%EC%9D%98-%EA%B0%92%EC%9D%B4-%EA%B0%99%EC%9C%BC%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C\">⚠️ 주의사항: 만약 해쉬의 값이 같으면 어떻게 될까?</a></p>\n<ul>\n<li><a href=\"#chaining\">Chaining</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></p>\n</li>\n</ul>\n</div>","excerpt":"#️⃣ 해시 👨‍🏫 해쉬 테이블(Hash Table)은 “키” 와 “데이터”를 저장함으로써 즉각적으로 데이터를 받아오고 업데이트하고 싶을 때 사용하는 빠른 검색과 저장이 특징인 자료구조이다. 해시 테이블의 형태의 자료구조는 여러 언어에서 이미 우리가 많이 사용하고 있다. 자바스크립트의 오브젝트 또는 파이썬의 딕셔너리를 해시 테이블과 같다고 보면 된다 (사실 완저히 같다고 할 수는 없지만 현재로서는 이렇게 이해하는게 가장 좋을거 같다). “데이터를 빠르게 검색할 수 있다”라는 해시 테이블의 장점은 우리가 딕셔너리에서 또는 자바스크립트 오브젝트에서 index가 아닌 key 값으로 특정 데이터에 접근할 때를 생각하면 된다. 예를 들어서 위에 예시로 작성한 dict 오브젝트에 2개의 데이터 쌍이 아닌 100개의 key value 쌍의 데이터가 있다고 생각해보자. 아무리 많은 데이터가 있어도 key 값만 가지고 있다면 바로 원하는 데이터에 접근할 수 있고 따라서 해시테이블의 평균 시간복잡도는 O(…","frontmatter":{"date":"November 09, 2021","title":"해시 테이블 (hash table)","categories":"자료구조","author":"장희성","emoji":"✏️"},"fields":{"slug":"/hash-table/"}},"next":{"id":"b475ed69-1bf7-5412-b19b-0f0e553c7480","html":"<h2 id=\"lazy-initialization-\" style=\"position:relative;\"><a href=\"#lazy-initialization-\" aria-label=\"lazy initialization  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lazy initialization 🥱</h2>\n<h2 id=\"지연-초기-state\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EC%97%B0-%EC%B4%88%EA%B8%B0-state\" aria-label=\"지연 초기 state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;지연 초기 state></h2>\n<p>리액트에서 특정 함수나 실행 시간이 오래 걸리는 값 비싼 연산이 필요할때 useCallback이나 useMemo로 최적화를 한다.</p>\n<p>이번 블로그에서는 useState을 사용해서 초기 상태(state) 값을 할당할때 값 비싼 연산이 필요한 함수를 <code class=\"language-text\">useState(expensiveFunction())</code>이런식으로 바로 파라미터로 전달하면 발생하는 <strong>문제점과 해결 방법</strong>을 정리해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Greeting 컴포넌트</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GreetingComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLocalStorageValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> initialName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLocalStorageValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">></span>Name<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>name <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>Hello <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token string\">'Please type your name'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr/>\n<h2 id=\"예시️️\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C%EF%B8%8F%EF%B8%8F\" aria-label=\"예시️️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시🕵️‍♀️</h2>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/4c8725ce-458d-4013-8592-71e21afc198e/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.35.51.png\" alt=\"\"></p>\n<ol>\n<li>\n<p>사용자가 Input창에 이름을 입력하면 입력 값을 name 값에 업데이트하고 Hello {name}으로 사용자가 입력한 이름을 화면에 그려주는 간단한 컴포넌트이다.</p>\n</li>\n<li>\n<p>새로고침 이후에도 사용자가 마지막으로 입력한 값을 화면에 그려주기 위해서 useEffect의 의존 값을 name을 설정하고 name 값의 변화를 감지하면 localStorage에 저장하고</p>\n</li>\n<li>\n<p>컴포넌트가 리랜더링되면 useState에서 getLocalStorageValue() 함수를 통해서 로컬스토리지 값을 초기 name 값으로 설정한다.</p>\n</li>\n</ol>\n<h2 id=\"-어떤-문제가-있을까\" style=\"position:relative;\"><a href=\"#-%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\" 어떤 문제가 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 어떤 문제가 있을까?</h2>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/7654a231-891b-46f4-b7b1-0a878ed5f2f7/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.45.22.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLocalStorageValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i am an expensive function!!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> initialName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 <code class=\"language-text\">getLocalStorageValue()</code> 함수안서 로그를 찍어보면 해당 함수가 인풋 창에 입력되는 네임 값이 변할때 마다 실행되고 있는걸 볼 수 있다.</p>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/9333094b-8b00-4abf-a51e-2e62dbdc84b0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.46.01.png\" alt=\"\"></p>\n<p>우리는 초기에 컴포넌트가 실행될때 딱 한번만 로컬스토리지에서 값을 받아오면 되는데 리렌더링이 발생할때 마다 불필요한 함수가 실행되는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getLocalStorageValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/d9117a2b-ce64-4314-8e35-33851d937097/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.59.32.png\" alt=\"\"></p>\n<p>이렇게 고비용 계산을 초기 initialState 값으로 전달해야 하는 경우에 함수 형태로 useState을 변경해주면 해당 함수는 컴포넌트가 첫 랜더링할때 한번만 실행되고 이후 리랜더링 상황에서는 다시 실행되지 않는다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#lazy-initialization-\">Lazy initialization 🥱</a></li>\n<li><a href=\"#%EC%A7%80%EC%97%B0-%EC%B4%88%EA%B8%B0-state\">&#x3C;지연 초기 state></a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C%EF%B8%8F%EF%B8%8F\">예시🕵️‍♀️</a></li>\n<li><a href=\"#-%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EC%9D%84%EA%B9%8C\">❌ 어떤 문제가 있을까?</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 08, 2021","title":"useState 지연 초기 state(lazy state initialization)","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/lazy-state-initialization/"}},"prev":{"id":"1999e58c-6523-57be-b01f-53c27dfa1025","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/d3b0a300-5ab5-4efc-8c6a-a7fd728ec031/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-12-04%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%206.19.30.png\" alt=\"\"></p>\n<p>클라이언트에서 외부 데이터가 필요할때 즉, 서버에 api 요청을 보내야할때 axio를 계속해서 사용 해 왔다.</p>\n<p>그러다 얼마 전 회사에서 신규 프로젝트를 next로 개발하게 되었는데 graphql 서버와 통신하기 때문에 해당 프로젝트에서는 자연스럽게 apollo-client를 사용했지만 next 공부를 위해서 공식 문서를 둘러보다 SWR에 대해서 알게 되었다.</p>\n<p>요즘 리액트 진영에서 핫한? 프레임워크 이기때문에 Next.js가 클라이언트 및 서버 측 렌더링을 모두 지원하는 것을 알고 있을 것이다. Next에서는 데이터를 가져오는 여러 가지 방법을 제공하는데 그중 하나가 next가 직접 개발한 SWR이다.</p>\n<p><code class=\"language-text\">공식 문에서는 SWR을 \"데이터 가져오기를 위한 React Hooks\"</code>이며 SWR을 사용하면 컴포넌트는 지속적이며 자동으로 데이터 업데이트 스트림을 받게 되고 그로인해 UI는 항상 빠르고 반응한다고 소개한다.</p>\n<p>이번 글에서는 기본적인 SWR 개념 및 사용법과 SWR이 제공하는 caching, pagination, revalidation 등의 기능을 살펴보고자 한다.</p>\n<hr/>\n<h2 id=\"what-is-swr\" style=\"position:relative;\"><a href=\"#what-is-swr\" aria-label=\"what is swr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is SWR?</h2>\n<p>SWR은 stale-when-revalidate의 약자이며 앞에서 언급했듯이Next.js와 같은 팀에서 만든 데이터 요청을 위한 경량 라이브러이다. SWR은 데이터베이스의 특정 상태(정확히는 API의 응답)를 직접 컴포넌트로 연결하기 때문에 개발자는 useSWR 을 통해 원격 서버의 특정 상태에 연결된 스트림을 얻을 수 있으며 그 스트림을 통해 원격 상태에 접근할 수 있고 이를 통해 데이터를 직접 화면에 뿌려줄 수 있다 (e.g 로딩중일때 spinner를 화면에 랜더링).</p>\n<p>🤔 자, 그럼 swr은 데이터를 가져오는 데 axios에 비해 무엇이 좋은가?</p>\n<h3 id=\"포커싱하면-데이터가-갱신된다\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%BB%A4%EC%8B%B1%ED%95%98%EB%A9%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%EA%B0%B1%EC%8B%A0%EB%90%9C%EB%8B%A4\" aria-label=\"포커싱하면 데이터가 갱신된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포커싱하면 데이터가 갱신된다.</h3>\n<p>axios는 한 번 get으로 호출을 하면 다시 호출하지 않는 이상 이전의 데이터를 그대로 유지하는 반면 swr은 최초 한 번만 호출해도 다른 곳으로 포커싱을 옮겼다가 다시 포커싱하면 새로운 데이터로 갱신된다.</p>\n<h3 id=\"주기적인-호출도-가능하다\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EA%B8%B0%EC%A0%81%EC%9D%B8-%ED%98%B8%EC%B6%9C%EB%8F%84-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4\" aria-label=\"주기적인 호출도 가능하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주기적인 호출도 가능하다.</h3>\n<p>이 기능은 apollo-client의 useQuery hooks에서도 제공하는 기능이고 실제 회사 프로젝트에서 아주 유용하게 사용했던 기억이 있다.</p>\n<blockquote>\n<p>비대면 진료 프로젝트를 진행할때 환자-의사 매칭을 위해 의사분들이 사용하는 데스크탑 페이지를 따로 구축 했는데 소켓을 사용하지 않고 실시간으로 들어오는 환자들의 진료 신청을 대기중인 환자 리스트 페이지에 업데이트하고 싶었는데 이때 usequery가 제공하는 <strong>Polling</strong> 기능이 아주 유용했다.</p>\n</blockquote>\n<p>비슷한 상황에서 SWR을 사용하고 있다면 Websocket 만큼은 아니지만 polling 방식을 이용해 Realtime을 구현 해보는 것을 적극 추천한다.</p>\n<h3 id=\"캐시된-데이터를-이용한다\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C%EB%90%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\"캐시된 데이터를 이용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐시된 데이터를 이용한다.</h3>\n<p>만약에 데이터를 가져오는 데 오래 걸리는 호출이 있다고 가정하자. 한 5초 정도? 그럼 해당 페이지를 들어갈 때마다 axios는 5초동안 데이터를 가져올 것이다.</p>\n<p>하지만 swr은 최초에 데이터를 수집한 후에는 계속해서 오래 걸리는 호출 방식을 고수하는 것이 아니라 캐시된 데이터를 이용해서 효율적인 동작을 만들어낸다.</p>\n<p>물론 캐시 이후에는 자동적으로 revalidate하여 데이터의 일관성을 유지해준다.</p>\n<p>그 외에도 pagination 후에도 이전 스크롤 위치를 자동으로 기억해준다던지, 먼저 적용하고 이후 revalidation에서 규칙을 적용시켜준다던지 (local mutation: a good way to make changes feel faster) useSWR들 간에 의존성을 지원해준다던지 여러가지 추가 기능들을 제공해준다.</p>\n<h2 id=\"데이터-호출하기\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"데이터 호출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 호출하기</h2>\n<h3 id=\"1-fetching-the-data-with-useswr\" style=\"position:relative;\"><a href=\"#1-fetching-the-data-with-useswr\" aria-label=\"1 fetching the data with useswr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Fetching the data with useSWR</h3>\n<p>SWR는 기본적으로 “useSWR” 과 “useSWRnfinite”, 두개의 hooks를 제공하는데 useSWRnfinite은 페지네이션을 데이터에 매길 수 있게 해준다. 이를 통해서 infinity scroll(무한 스크롤)등을 쉽게 구현 할 수 있다.</p>\n<p>✏️ 자, 이제 코드를 통해 살표보자:</p>\n<p>-> useRequest.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> useSWR <span class=\"token keyword\">from</span> <span class=\"token string\">'swr'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetcher</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://jsonplaceholder.typicode.com'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useGetPosts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Path is required'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> baseUrl <span class=\"token operator\">+</span> path<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> posts<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSWR</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> fetcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> posts<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제에서는 useGetPosts라는 커스텀 훅스를 만들어서 사용했지만 데이터 요청이 이뤄지는 컴포넌트 안에서 직접 사용해도 무관하다.</p>\n<p>fetcher 함수는 HTTP 요청을 서버로 보낸 다음 응답 데이터를 JSON으로 형식으로 파싱해준다. fetcher 메서드는 Next.js가 기본적으로 제공되기 때문에 별도의 import나 모듈 설치가 필요하지 않다.</p>\n<p>-> components/Post.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> post <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> post<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"Card\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1 className<span class=\"token operator\">=</span><span class=\"token string\">\"Card--title\"</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p className<span class=\"token operator\">=</span><span class=\"token string\">\"Card--body\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>body<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>-> App.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useGetPosts <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../useRequest'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Post <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/Post'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">IndexPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> posts<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useGetPosts</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Something went wrong<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>posts<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>My Posts<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Post post<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예시에서 useSWR 을 통해 얻은 data 를 원격상태에 연결된 스트림으로 바라볼 수 있다.</p>\n<p>App 컴포넌트는 지금 직접 원격 서버의 상태를 화면에 뿌려주고 있는 것이다.</p>\n<p>원격의 상태는 비동기적일 수 밖에 없기 때문에 useSWR은 데이터(data) 뿐만 아니라 에러(error)와 로딩상태(isValidating)를 함께 리턴한다.</p>\n<p>리액트 컴포넌트는 3가지 리턴값을 이용해 서버의 상태를 실시간(에 가깝게)으로 화면에 표현할 수가 있다. 그리고 서버에서 post 데이터 값이 바뀌면 자동으로 화면에 새롭게 갱신된다.</p>\n<p>useState 와 useEffect 없이 이런 일이 가능하다는 것은 놀라운 점이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#what-is-swr\">What is SWR?</a></p>\n<ul>\n<li><a href=\"#%ED%8F%AC%EC%BB%A4%EC%8B%B1%ED%95%98%EB%A9%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%EA%B0%B1%EC%8B%A0%EB%90%9C%EB%8B%A4\">포커싱하면 데이터가 갱신된다.</a></li>\n<li><a href=\"#%EC%A3%BC%EA%B8%B0%EC%A0%81%EC%9D%B8-%ED%98%B8%EC%B6%9C%EB%8F%84-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4\">주기적인 호출도 가능하다.</a></li>\n<li><a href=\"#%EC%BA%90%EC%8B%9C%EB%90%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C%EB%8B%A4\">캐시된 데이터를 이용한다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0\">데이터 호출하기</a></p>\n<ul>\n<li><a href=\"#1-fetching-the-data-with-useswr\">1. Fetching the data with useSWR</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 21, 2021","title":"Next에서 데이터 호출하기","categories":"프론트엔드","author":"장희성","emoji":"📚"},"fields":{"slug":"/SWR/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/hash-table/","nextSlug":"/lazy-state-initialization/","prevSlug":"/SWR/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}