{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/react-key-props/",
    "result": {"data":{"cur":{"id":"e4f812f0-91fb-5c69-a383-2fe97f7fbaf7","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/dfbc6ee9-8e5e-4b85-8056-abc53c6aef83/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-09-21%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2012.53.31.png\" alt=\"\"></p>\n<p>리액트 개발을 해봤다면 배열을 렌더링 할때 위와 같은 ❌ 경고 메세지를 한번쯤 봤을거다. 이번 시간에는 리액트 Element에 왜 key props가 필요하고 어떤 점을 주의해야 하는지 알아보자.</p>\n<h2 id=\"-조정reconciliation\" style=\"position:relative;\"><a href=\"#-%EC%A1%B0%EC%A0%95reconciliation\" aria-label=\" 조정reconciliation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 조정(Reconciliation)</h2>\n<p>리액트 문서를 먼저 살펴보자:</p>\n<blockquote>\n<p>Key는 React가 어떤 항목을 변경, 추가 또는 삭제할지 식별하는 것을 돕습니다. key는 엘리먼트에 안정적인 고유성을 부여하기 위해 배열 내부의 엘리먼트에 지정해야 합니다.</p>\n</blockquote>\n<p>리액트 공식 가이드에 따르면 key props가 컴포넌트의 변화가 생겼을때 어떤 항복을 변경, 추가, 삭제할지 돕는다고 한다.</p>\n<p>컴포넌트의 상태 값이 변경되면 렌더링 함수는 이전 요소와 현재 요소의 트리를 반환한다.</p>\n<p>React는 가장 최근의 변경 사항으로 UI를 효율적으로 업데이트하기 위해 어떤 차이가 있는지 파악해야 하고, 이 두 트리를 일치시키는 프로세스를 **조정(Reconciliation)**이라고 한다.</p>\n<p>이때 변경 사항만 기존 rendering에 적용 시키기 위해서는 변경 전 / 후의 element tree를 비교가 필요하고 <strong>이 tree 비교에 React는 2가지 가정을 추가해서 O(n)의 휴리스틱 알고리즘을 사용한다</strong>.</p>\n<hr/>\n<h2 id=\"그래서-key-props가-왜-필요하다고\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-key-props%EA%B0%80-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4%EA%B3%A0\" aria-label=\"그래서 key props가 왜 필요하다고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 key props가 왜 필요하다고?</h2>\n<p>위에서 언급했듯이 state이나 props가 갱신되면 리액트 render() 함수는 새로운 React 엘리먼트 트리를 반환단다. 이때 가장 <strong>효과적으로 UI를 갱신하는 방법</strong>이 필요한데 기존 알고리즘으로 이를 해결하려고 하면 성능 문제가 발생한다.</p>\n<p>기존에 어떤 알고리즘을 선택했는지 공식 문서에서 명시하고 있지는 않지만 기존에 최첨단 알고리즘을 사용해도 하나의 트리를 가지고 다른 트리로 변화하기 위한 <strong>최소한의 연산 수가 O(n3)의 복잡도</strong>를 가진다고 한다.</p>\n<p>리액트 팀의 공식 문서에 따르면 이러한 알고리즘을 리액트에 적용하면 1000개의 엘리먼트를 그리기 위해 10억 번의 비교 연산이 필요하다고 한다. 10억..😱 보기만해도 어플리케이션의 크기가 커지게 되면 UI를 그리기 위해 너무나도 비싼 연산이 필요하다.</p>\n<h2 id=\"휴리스틱-알고리즘\" style=\"position:relative;\"><a href=\"#%ED%9C%B4%EB%A6%AC%EC%8A%A4%ED%8B%B1-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"휴리스틱 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>휴리스틱 알고리즘</h2>\n<p>리액트는 대신, 두가지 가정을 기반하여 기존 O(n3)의 복잡도를 O(n) 복잡도의 <strong>휴리스틱 알고리즘</strong>을 구현했다고 한다.</p>\n<h4 id=\"-두-가지-가정\" style=\"position:relative;\"><a href=\"#-%EB%91%90-%EA%B0%80%EC%A7%80-%EA%B0%80%EC%A0%95\" aria-label=\" 두 가지 가정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 두 가지 가정</h4>\n<ol>\n<li>서로 다른 타입의 두 엘리먼트는 서로 다른 트리를 만들어낸다.</li>\n<li>개발자가 <strong>key prop</strong>을 통해, 여러 렌더링 사이에서 어떤 자식 엘리먼트가 변경되지 않아야 할지 표시해 줄 수 있다.</li>\n</ol>\n<p>📌 위 두가지 가정은 휴리스틱 알고리즘이 작동하기 위한 중요한 가정이고 이를 충족하지 못하게되면 왜 성능적인 불이익이 발생하는지 살펴보자.</p>\n<h3 id=\"엘리먼트의-타입이-다른-경우\" style=\"position:relative;\"><a href=\"#%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9E%85%EC%9D%B4-%EB%8B%A4%EB%A5%B8-%EA%B2%BD%EC%9A%B0\" aria-label=\"엘리먼트의 타입이 다른 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엘리먼트의 타입이 다른 경우</h3>\n<p><a href=\"https://ko.reactjs.org/docs/reconciliation.html#gatsby-focus-wrapper\">리액트 공식 문서 참고</a>\n두 루트 엘리먼트의 타입이 다르면, React는 이전 트리를 버리고 완전히 새로운 트리를 반환한다. <code class=\"language-text\">&lt;a></code>에서 <code class=\"language-text\">&lt;img></code>로, <code class=\"language-text\">&lt;Article></code>에서 <code class=\"language-text\">&lt;Comment></code>로, 혹은 <code class=\"language-text\">&lt;Button></code>에서 <code class=\"language-text\">&lt;div></code>로 바뀌는 것 모두 트리 전체를 재구축하는 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span> 변경\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위와 같은 경우는 DOM을 완전히 새로 그리는 경우로 이전 Counter 인스턴스는 파괴되고 새로운 Counter 인스턴스가 생성된다.</p>\n<h3 id=\"엘리먼트의-타입이-같은-경우\" style=\"position:relative;\"><a href=\"#%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9E%85%EC%9D%B4-%EA%B0%99%EC%9D%80-%EA%B2%BD%EC%9A%B0\" aria-label=\"엘리먼트의 타입이 같은 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엘리먼트의 타입이 같은 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> fontWeight<span class=\"token operator\">:</span> <span class=\"token string\">'bold'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span> 변경\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> fontWeight<span class=\"token operator\">:</span> <span class=\"token string\">'bold'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>이번 경우에는 div 타입이 span 타입으로 변경되었던 첫번째 경우와 다르게 동일한 타입을 가지기 때문에 엘리먼트는 동일한 속성은 유지하고 변경된 <code class=\"language-text\">color</code> 속성만 갱신한다.</p>\n<p>이제 아래 실제 예시를 만들어 왜 우리가 반복되는 엘리먼트를 추가 할때 key prop을 넣어야 하는지 알아보자.</p>\n<h3 id=\"자식에-대한-재귀적-처리\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%8B%9D%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9E%AC%EA%B7%80%EC%A0%81-%EC%B2%98%EB%A6%AC\" aria-label=\"자식에 대한 재귀적 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자식에 대한 재귀적 처리</h3>\n<p>DOM 노드의 자식들을 재귀적으로 처리할 때, React는 기본적으로 동시에 두 리스트를 순회하고 차이점이 있으면 변경을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍎 apple'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍊 orange'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'grape'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍇 grape'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍐 pear'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span> 변경\n\n<span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍎 apple'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍊 orange'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'grape'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍇 grape'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>자식을 재귀적으로 선회하면서 두개의 트리 즉 이전 트리와 현재 변경된 새로운 트리를 비교하는데 이때 위 예시와 같이 마지막 <code class=\"language-text\">🍐pear</code> 엘리먼트 즉, 자식의 끝에있는 엘리먼트가 추가되거나 삭제되면 두 트리의 사이의 변경은 잘 성능 문제없이 잘 작동한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍐 pear'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍎 apple'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍊 orange'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'grape'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'🍇 grape'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이번에는 리스트의 맨 앞에 엘리먼트를 추가했다. 이 경우 리액트는 모든 요소가 제자리에 위치하지 않았다고 생각하고 종속트리는 유지 하지만 <strong>모든 자식 엘리먼트를 새로 그리게되된다.</strong> 이럴 경우에 리액트 공식 문서에 따르면 성능이 좋지 못하고 두 트리의 변환은 형편없이 작동한다고 한다.</p>\n<h3 id=\"리액트도-헷갈려\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%8F%84-%ED%97%B7%EA%B0%88%EB%A0%A4\" aria-label=\"리액트도 헷갈려 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트도 헷갈려…😢</h3>\n<p>이번 예시는 key props가 없는 상태에서 계속해서 추가나 삭제같은 변화가 일어나면 어떤 대재앙이 일어나는지 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍎 apple'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍊 orange'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍐 pear'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span> 변경\n\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍊 apple'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍐 pear'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">재조정</span><span class=\"token punctuation\">(</span>Reconciliation<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">-</span>       <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍎 apple'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">-</span>       <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍊 orange'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">+</span>       <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍊 apple'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>이럴 경우에 결론만 본다면 ’🍊 apple’과 ’🍐 pear’이 생겼기 때문에 잘 작동했다고 할 수 있다. 하지만 조금 더 생각해보면 방금 일어난 재조정 연산은 순전히 <strong>리액트의 예측</strong>으로 이뤄진 결과이다.</p>\n<h3 id=\"리액트가-예측을-했다고\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EA%B0%80-%EC%98%88%EC%B8%A1%EC%9D%84-%ED%96%88%EB%8B%A4%EA%B3%A0\" aria-label=\"리액트가 예측을 했다고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트가 예측을 했다고??</h3>\n<p>자 위 예시에서</p>\n<ol>\n<li>🍎 apple이 🍊 apple 변경되었고</li>\n<li>🍊 orange가 삭제되고</li>\n<li>새로운 🍐 pear이 추가되었다.</li>\n</ol>\n<p>이때 key prop과 같이 특정 요소를 지정할 수 있는 값이 없다면 리액트는 가장 괜찮은 예측으로 연산을 하는것이지 내가(개발자)가 어떻게 처리하려고 했는지 알 수가 없다.</p>\n<p>리액트 입장에서 생각해보자:\n리액트는 다음과 같은 고민을 하게된다.</p>\n<ol>\n<li>🍎 사과와 🍊 오렌지 리를 제거하고 🍊 사과와 함께 새 사과를 만들어야 하나?</li>\n<li>🍎 사과를 제거하고 🍊 오렌지를 🍊 사과로 이름을 바꿔야 하나?</li>\n<li>🍊 오렌지를 제거하고 🍎 사과 이름을 🍊 사과로 바꿔야하나?</li>\n<li>🍐 배를 제거한 다음 🍊 오렌지를 🍐 배로 이름을 바꾼 다음 🍎 사과를 🍊 사과로 이름을 바꿔야…허..??</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/68782077/134453029-c3dfa7cc-f661-4289-a6b5-72381b8ad8a3.gif\" alt=\"source\"></p>\n<h2 id=\"도와줘-key-prop-\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EC%99%80%EC%A4%98-key-prop-\" aria-label=\"도와줘 key prop  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도와줘 key prop 🙏</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍎 apple'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍊 orange'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍐 pear'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span> 변경\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍊 apple'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> <span class=\"token string\">'🍐 pear'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자 이제 이렇게 엘리먼트 요소의 고유 key prop을 전달해주면 더이상 예측이 아닌 <strong>정교하고 효율적인 연산이 가능해진다</strong>.</p>\n<p>예를들어 orange 키를 가진 요소가 사라졌음을 알 수 있기 때문에 페이지에서 해당 요소를 제거할 수 있고 apple이라는 key를 가진 요소가 그대로 남아있지만 string 요서 (예시에서는 과일 아이콘)만 변경됬음을 알고 해당 요소를 업데이트 할 수 있다.</p>\n<p>참고 문서:\n<a href=\"https://epicreact.dev/why-react-needs-a-key-prop/\">Kent C. D blog</a>\n<a href=\"https://ko.reactjs.org/docs/reconciliation.html\">리액트 공식문서</a>\n<a href=\"https://dev.to/francodalessio/understanding-the-importance-of-the-key-prop-in-react-3ag7\">Understanding the importance of the key prop in React - Franco D’Alessio</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%A1%B0%EC%A0%95reconciliation\">🤔 조정(Reconciliation)</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-key-props%EA%B0%80-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4%EA%B3%A0\">그래서 key props가 왜 필요하다고?</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%9C%B4%EB%A6%AC%EC%8A%A4%ED%8B%B1-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">휴리스틱 알고리즘</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EB%91%90-%EA%B0%80%EC%A7%80-%EA%B0%80%EC%A0%95\">✅ 두 가지 가정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9E%85%EC%9D%B4-%EB%8B%A4%EB%A5%B8-%EA%B2%BD%EC%9A%B0\">엘리먼트의 타입이 다른 경우</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9E%85%EC%9D%B4-%EA%B0%99%EC%9D%80-%EA%B2%BD%EC%9A%B0\">엘리먼트의 타입이 같은 경우</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EC%8B%9D%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9E%AC%EA%B7%80%EC%A0%81-%EC%B2%98%EB%A6%AC\">자식에 대한 재귀적 처리</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%8F%84-%ED%97%B7%EA%B0%88%EB%A0%A4\">리액트도 헷갈려…😢</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EA%B0%80-%EC%98%88%EC%B8%A1%EC%9D%84-%ED%96%88%EB%8B%A4%EA%B3%A0\">리액트가 예측을 했다고??</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8F%84%EC%99%80%EC%A4%98-key-prop-\">도와줘 key prop 🙏</a></p>\n</li>\n</ul>\n</div>","excerpt":"리액트 개발을 해봤다면 배열을 렌더링 할때 위와 같은 ❌ 경고 메세지를 한번쯤 봤을거다. 이번 시간에는 리액트 Element에 왜 key props가 필요하고 어떤 점을 주의해야 하는지 알아보자. 🤔 조정(Reconciliation) 리액트 문서를 먼저 살펴보자: Key는 React가 어떤 항목을 변경, 추가 또는 삭제할지 식별하는 것을 돕습니다. key는 엘리먼트에 안정적인 고유성을 부여하기 위해 배열 내부의 엘리먼트에 지정해야 합니다. 리액트 공식 가이드에 따르면 key props가 컴포넌트의 변화가 생겼을때 어떤 항복을 변경, 추가, 삭제할지 돕는다고 한다. 컴포넌트의 상태 값이 변경되면 렌더링 함수는 이전 요소와 현재 요소의 트리를 반환한다. React는 가장 최근의 변경 사항으로 UI를 효율적으로 업데이트하기 위해 어떤 차이가 있는지 파악해야 하고, 이 두 트리를 일치시키는 프로세스를 **조정(Reconciliation)**이라고 한다. 이때 변경 사항만 기존 render…","frontmatter":{"date":"September 23, 2021","title":"리액트 key props 자세히 알아보기","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/react-key-props/"}},"next":{"id":"a398fdcb-8322-5ef5-b7ec-160e0f5f6307","html":"<p><a href=\"https://kentcdodds.com/blog/what-is-jsx\">참고: Kent C Dodds - What is JSX?</a></p>\n<h2 id=\"-jsx\" style=\"position:relative;\"><a href=\"#-jsx\" aria-label=\" jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📚 JSX</h2>\n<blockquote>\n<p>“This funny tag syntax is neither a string nor HTML” - 리액트 공식 문서</p>\n</blockquote>\n<p>JSX는 Raw React API보다 직관적이며 코드를 읽을 때 이해하기 쉽게 만들어주는 <strong>syntactic sugar이다</strong>.</p>\n<p>그치만 JSX은 그 자체로 자바스크립트는 아니기 때문에 브라우저가 이를 이해하기 위해서는 <strong>babel</strong>과 같은 코드 컴파일러가 필요하다.</p>\n<p>실제 <a href=\"https://babeljs.io/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&#x26;build=&#x26;builtIns=App&#x26;corejs=3.6&#x26;spec=false&#x26;loose=false&#x26;code_lz=MYewdgzgLgBArgSxgXhgHgCYIG4D40QAOAhmLgBICmANtSGgPRGm7rNkDqIATtRo-3wMseAFBA&#x26;debug=false&#x26;forceAllTransforms=false&#x26;shippedProposals=false&#x26;circleciRepo=&#x26;evaluate=false&#x26;fileSize=false&#x26;timeTravel=false&#x26;sourceType=module&#x26;lineWrap=true&#x26;presets=react&#x26;prettier=true&#x26;targets=&#x26;version=7.15.7&#x26;externalPlugins=&#x26;assumptions=%7B%7D\">바벨</a> 사이트에 들어가보면 내가 작성한 JSX 코드가 어떻게 컴파일되어 브라우저가 이해하는 형식으로 변한하는지 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ui <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>h1 id<span class=\"token operator\">=</span><span class=\"token string\">\"greeting\"</span><span class=\"token operator\">></span>Hey there<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ↓ ↓ ↓ ↓ babel 컴파일후 ↓ ↓ ↓ ↓</span>\n\n<span class=\"token keyword\">const</span> ui <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'greeting'</span><span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> <span class=\"token string\">'Hey there'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://velog.io/@heesungj7/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B01-DOM-Javascript-and-React\">리액트 알아보기[1]</a>에서 기존 DOM 생성을 React API를 사용해서 변경했던 코드를 JSX 문법으로 변환해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> helloElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> worldElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> reactElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  className<span class=\"token operator\">:</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>helloElement<span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> worldElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ↓ ↓ ↓ ↓ JSX 문법 ↓ ↓ ↓ ↓</span>\n\n<span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr/>\n<h2 id=\"-리액트-커스텀-컴포넌트\" style=\"position:relative;\"><a href=\"#-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\" 리액트 커스텀 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📚 리액트 커스텀 컴포넌트</h2>\n<p>일반 자바스크립트에서 함수를 만들어 재사용 가능한 코드를 만드는 것과 같이 JSX또한 함수를 통해 재사용 가능한 JSX 코드를 작성할 수 있고 이를 리액트에서는 <strong>Componenet</strong>라고 부른다.</p>\n<h4 id=\"-html을-작성해서-dom에-아래와-같이-그리고-싶다고-해보자\" style=\"position:relative;\"><a href=\"#-html%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%B4%EC%84%9C-dom%EC%97%90-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%9D%B4-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EA%B3%A0-%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\" html을 작성해서 dom에 아래와 같이 그리고 싶다고 해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 html을 작성해서 DOM에 아래와 같이 그리고 싶다고 해보자.</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Goodbye World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>React.createElement의 첫 번째 인수로는 기존에 “div”, “span”으로 전달하던 type 말고도 랜더링 가능한 리액트 요소를 반환하는 함수를 직접 전달할 수 있기 때문에, 아래와 같이 인수 값으로 하위 속성(children)을 받아 리액트 요소를 반환하는 함수를 만들면 코드 중복을 해결 할수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">msg</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> HelloElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Goodbye World'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>HelloElement<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ↓ ↓ ↓ ↓ babel 컴파일 ↓ ↓ ↓ ↓</span>\n\n<span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    className<span class=\"token operator\">:</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/*#__PURE__*/</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      className<span class=\"token operator\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/*#__PURE__*/</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      className<span class=\"token operator\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Goodbye World'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"-jsx-문법으로-변경해보자\" style=\"position:relative;\"><a href=\"#-jsx-%EB%AC%B8%EB%B2%95%EC%9C%BC%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\" jsx 문법으로 변경해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔥 JSX 문법으로 변경해보자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">msg</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"Message\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>message<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>message<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-jsx\">📚 JSX</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\">📚 리액트 커스텀 컴포넌트</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#-html%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%B4%EC%84%9C-dom%EC%97%90-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%9D%B4-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EA%B3%A0-%ED%95%B4%EB%B3%B4%EC%9E%90\">📌 html을 작성해서 DOM에 아래와 같이 그리고 싶다고 해보자.</a></li>\n<li><a href=\"#-jsx-%EB%AC%B8%EB%B2%95%EC%9C%BC%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%B4%EB%B3%B4%EC%9E%90\">🔥 JSX 문법으로 변경해보자</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 20, 2021","title":"jsx와 리액트 컴포넌트","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/jsx-and-react-component/"}},"prev":{"id":"04d974cc-c24c-5182-a14e-59136468b1d7","html":"<p><img src=\"https://images.velog.io/images/heesungj7/post/7e27d877-5adb-47ab-85e6-25ca0cb2719a/unnamed.jpeg\" alt=\"\"></p>\n<p>다들 처음 프로그래밍 언어 또는 웹 개발을 공부를 시작하면서 그 유명한 **“hello, world”**를 터미널 또는 브라우저에 찍어본 경험이 있을꺼다.</p>\n<p>DOM과 HTML을 어느정도는 알고있다면 “Hello, World”를 브라우저 화면에 쉽게 출력할 수 있을꺼라 생각한다. 또한 스크립트 태그 안에서 자바스크립트 코드를 통해 DOM 조작을하고 웹 페이지와 상호작용을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span><span class=\"token comment\">// 자바스크립트 코드&lt;/script></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<p>다양한 웹 프레임워크가 나오기 이전에는 서버에서 HTML을 생성하고 브라우저와 상호작용을 하기 위해 HTML 위에 자바스크립트 코드를 추가했다.</p>\n<p>하지만 이러한 방식은 웹 페이지가 복잡해지고 개발적으로 요구사항이 까다로워지면서 유지보수나 성능 측면에서 문제가 발생하기 시작했고 이를 해결하기 위해 우리가 알고있는 vue나 react같은 다양한 웹 프레임워크가 등장했다. 만약 지금 리액트를 사용하지 않고 서비스를 만들어여 한다면…🥲</p>\n<p>그만큼 리액트가 좋다 😅</p>\n<hr/>\n<h1 id=\"그래서-뭐-dom이-왜\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%AD%90-dom%EC%9D%B4-%EC%99%9C\" aria-label=\"그래서 뭐 dom이 왜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 뭐 DOM이 왜?</h1>\n<p>리액트는 세계에서 가장 널리 사용되는 프런트엔드 프레임워크이고 이 블로그 시리즈 또한 결국 리액트를 조금 더 깊게 이해하고 싶은 마음에 시작했다.</p>\n<h3 id=\"-그렇다면-dom을-이해하는게-리액트를-더-잘-알기-위해서-왜-중요한가\" style=\"position:relative;\"><a href=\"#-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-dom%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94%EA%B2%8C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EB%8D%94-%EC%9E%98-%EC%95%8C%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%99%9C-%EC%A4%91%EC%9A%94%ED%95%9C%EA%B0%80\" aria-label=\" 그렇다면 dom을 이해하는게 리액트를 더 잘 알기 위해서 왜 중요한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 그렇다면 DOM을 이해하는게 리액트를 더 잘 알기 위해서 왜 중요한가?</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>body id<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span>\n      <span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document\n        <span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">textContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n</code></pre></div>\n<p>위에서 사용했던 예시를 HTML 태그를 직접 작성하지 않고 자바스크립트를 사용하여 <strong>“Hello World”라는 텍스트로 div DOM 노드를 만들고 해당 DOM 노드를 문서에 삽입하여</strong> 자바스크립트 코드만으로 같은 출력 결과를 얻을 수 있다.</p>\n<blockquote>\n<p>📌 세계에서 가장 널리 사용되고 프런트엔드 프레임워크인 리액트도 DOM 노드를 만들 때 사용하는 것과 동일한 API를 사용한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'select'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>domElement<span class=\"token operator\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLSelectElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>multiple<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          node<span class=\"token punctuation\">.</span>multiple <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Setting a size greater than 1 causes a select to behave like `multiple=true`, where</span>\n          <span class=\"token comment\">// it is possible that no option is selected.</span>\n          <span class=\"token comment\">//</span>\n          <span class=\"token comment\">// This is only necessary when a select in \"single selection mode\".</span>\n          node<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    domElement <span class=\"token operator\">=</span> ownerDocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElementNS</span><span class=\"token punctuation\">(</span>namespaceURI<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>namespaceURI <span class=\"token operator\">===</span> <span class=\"token constant\">HTML_NAMESPACE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">!</span>isCustomComponentTag <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>domElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span>\n          <span class=\"token string\">'[object HTMLUnknownElement]'</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token operator\">!</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>warnedUnknownTags<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        warnedUnknownTags<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">'The tag &lt;%s> is unrecognized in this browser. '</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'If you meant to render a React component, start its name with '</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'an uppercase letter.'</span><span class=\"token punctuation\">,</span>\n          type<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> domElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>리액트 소스코드의 일부분이다. 사실 이 코드가 어떤 동작을 하는지 알지는 못하지만 리액트가 흔히 말하는 어떠한 “매직”을 일으키는게 아니라 내부적으로는 우리가 알고있는 browser API를 사용해서 DOM 요소를 만들고 있다는게 중요하다.</p>\n<ul>\n<li>\n<p>React 이전에는 DOM을 직접적으로 조작하는 방식이였고 이러한 방식을 <strong>명령형(imperative) 프로그래밍</strong> 이라고 한다.</p>\n</li>\n<li>\n<p>이 방식의 문제점은 여러 이벤트 간의 연결을 파악하기 힘들다는 점이다.</p>\n</li>\n<li>\n<p>또한 DOM을 직접적으로 조작하는 것은 performance에 큰 영향을 미친다.</p>\n</li>\n</ul>\n<p>즉, 리액트는 이러한 문제점을 보안해주기 위해 기존 명령형 방식을 내부적으로 처리해서 <strong>선언형(declarative) 프로그래밍적</strong>으로 API를 사용할 수 있게 해준다.</p>\n<hr/>\n<h2 id=\"react--reactdom\" style=\"position:relative;\"><a href=\"#react--reactdom\" aria-label=\"react  reactdom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React &#x26; ReactDOM</h2>\n<p>리액트에 익숙하다면 아래 구문을 잘 알고 있을꺼다. App.js 컴포넌트를 작업하고나 새로운 컴포넌트를 만들면서 무수히 많이 작성했을꺼다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>일단은 리액트의 문법인 JSX를 사용하지 않고 리액트가 제공하는 API를 통해서 직접적으로 위에서 만든 DOM 요소를 리액트 요소로 변경해보자.</p>\n<blockquote>\n<p>기억해야 할게 리액트는 리액트 네이티브와 같이 브라주저가 아닌 다른 플랫폼 개발도 지원하기 때문에 React API 외에도 각 플랫폼에 맞춰진 별도의 API를 제공한다. 웹의 경우 ReactDOM을 사용한다.</p>\n</blockquote>\n<ul>\n<li><strong>React</strong>: document.createElement()와 비슷한 React.createElement같은 메소드를 제공한다.</li>\n<li><strong>ReactDOM</strong>: DOM에 요소를 랜더링할때 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/react@17.0.0/umd/react.development.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/react-dom@17.0.0/umd/react-dom.development.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> helloElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> worldElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> reactElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      className<span class=\"token operator\">:</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span>\n      children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>helloElement<span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> worldElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>reactElement<span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"-브라우저-출력화면\" style=\"position:relative;\"><a href=\"#-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%B6%9C%EB%A0%A5%ED%99%94%EB%A9%B4\" aria-label=\" 브라우저 출력화면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖥 브라우저 출력화면:</h4>\n<p><img src=\"https://images.velog.io/images/heesungj7/post/05527512-46c7-4128-aec2-02a91e81f4aa/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-09-20%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%205.58.39.png\" alt=\"\"></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-dom%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94%EA%B2%8C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EB%8D%94-%EC%9E%98-%EC%95%8C%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%99%9C-%EC%A4%91%EC%9A%94%ED%95%9C%EA%B0%80\">🤔 그렇다면 DOM을 이해하는게 리액트를 더 잘 알기 위해서 왜 중요한가?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#react--reactdom\">React &#x26; ReactDOM</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%B6%9C%EB%A0%A5%ED%99%94%EB%A9%B4\">🖥 브라우저 출력화면:</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 07, 2021","title":"react 컴포넌트와 DOM api","categories":"프론트엔드","author":"장희성","emoji":"✏️"},"fields":{"slug":"/react-and-dom-api/"}},"site":{"siteMetadata":{"siteUrl":"https://heesungjang.github.io","comments":{"utterances":{"repo":"heesungjang/heesungjang.github.io"}}}}},"pageContext":{"slug":"/react-key-props/","nextSlug":"/jsx-and-react-component/","prevSlug":"/react-and-dom-api/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}